{
    "collab_server" : "",
    "contents" : "\n\n\n#' Get Account Info\n#'\n#' Get information about accounts\n#'\n#' @param session_token Session token from `create_session_token`.\n#'\n#' @return A list with one element for each account\n#' @export\n#'\n#' @examples\n#'\n#' get_account_info(session_token)\n#'\nget_account_info <- function(session_token){\n\n  url <- 'https://prod-1-dc-api-oopeix3r.deepcrawl.com/accounts'\n\n  session_response <-  httr::GET(url, httr::add_headers('X-Auth-Token' = session_token))\n\n  httr::stop_for_status(session_response)\n\n  if (httr::http_type(session_response) != \"application/json\") {\n    stop(\"API did not return json\", call. = FALSE)\n  }\n\n  parsed <- jsonlite::fromJSON(httr::content(session_response, \"text\", encoding = 'utf-8'), simplifyVector = FALSE)\n\n  return(parsed)\n\n}\n\n\n\n#' List all projects\n#'\n#' List all projects\n#'\n#' @param session_token Session token from `create_session_token`.\n#' @param account_id The ID for the account (can be found with get_account_info)\n#'\n#' @return A list with one element for each project\n#' @export\n#'\n#' @examples\n#'\n#' get_projects_info(session_token, 424)\nget_projects_info <- function(session_token, account_id){\n\n  url <- 'https://prod-1-dc-api-oopeix3r.deepcrawl.com'\n\n  session_response <- httr::GET(url,\n                                 path = c('accounts', account_id, 'projects'),\n                                 httr::add_headers('X-Auth-Token' = session_token))\n\n  httr::stop_for_status(session_response)\n\n  if (httr::http_type(session_response) != \"application/json\") {\n    stop(\"API did not return json\", call. = FALSE)\n  }\n\n  parsed <- jsonlite::fromJSON(httr::content(session_response, \"text\", encoding = 'utf-8'), simplifyVector = FALSE)\n\n  return(parsed)\n\n}\n\n#' List all crawls\n#'\n#' List all crawls for a given project\n#'\n#' @param session_token Session token from `create_session_token`.\n#' @param account_id The ID for the account (can be found with get_account_info)\n#' @param project_id The ID of the project, from `create_project`\n#'\n#' @return A list with one element for each crawl\n#' @export\n#'\n#' @examples\n#'\n#' get_crawls_info(session_token, 424, 18823)\nget_crawls_info <-  function(session_token, account_id, project_id){\n\n  url <- 'https://prod-1-dc-api-oopeix3r.deepcrawl.com'\n\n  session_response <- httr::GET(url,\n                                path = c('accounts', account_id, 'projects', project_id, 'crawls'),\n                                httr::add_headers('X-Auth-Token' = session_token))\n\n  httr::stop_for_status(session_response)\n\n  if (httr::http_type(session_response) != \"application/json\") {\n    stop(\"API did not return json\", call. = FALSE)\n  }\n\n  parsed <- jsonlite::fromJSON(httr::content(session_response, \"text\", encoding = 'utf-8'), simplifyVector = FALSE)\n\n  return(parsed)\n\n}\n\n#' List all reports\n#'\n#' List all reports for a given crawl within a project\n#'\n#' @param session_token Session token from `create_session_token`.\n#' @param account_id The ID for the account (can be found with get_account_info)\n#' @param project_id The ID of the project, from `create_project\n#' @param crawl_id The ID of the crawl, from `create_crawl`\n#'\n#' @return A list with one element for each report\n#' @export\n#'\n#' @examples\n#'\n#' get_reports_info(session_token, 424, 18821, 114538)\nget_reports_info <-  function(session_token, account_id, project_id, crawl_id){\n\n  url <- 'https://prod-1-dc-api-oopeix3r.deepcrawl.com'\n\n  session_response <- httr::GET(url,\n                                path = c('accounts', account_id,\n                                         'projects', project_id,\n                                         'crawls',   crawl_id,\n                                         'reports'),\n                                httr::add_headers('X-Auth-Token' = session_token))\n\n  httr::stop_for_status(session_response)\n\n  if (httr::http_type(session_response) != \"application/json\") {\n    stop(\"API did not return json\", call. = FALSE)\n  }\n\n  parsed <- jsonlite::fromJSON(httr::content(session_response, \"text\", encoding = 'utf-8'), simplifyVector = FALSE)\n\n  return(parsed)\n\n}\n\n#' Get all data from a report\n#'\n#' Get the data from a given report\n#'\n#' @param session_token Session token from `create_session_token`.\n#' @param account_id The ID for the account (can be found with get_account_info)\n#' @param project_id The ID of the project, from `create_project\n#' @param crawl_id The ID of the crawl, from `create_crawl`\n#' @param report_id The ID of the report (can be found within `get_report_info`\n#'\n#' @return A list with one element for each report\n#' @export\n#'\n#' @examples\n#'\n#' get_report_data(session_token, 424, 18821, 114538, 42384583)\nget_report_data <- function(session_token, account_id, project_id, crawl_id, report_id){\n\n  url <- 'https://prod-1-dc-api-oopeix3r.deepcrawl.com'\n\n  session_response <- httr::GET(url,\n                                path = c('accounts', account_id,\n                                         'projects', project_id,\n                                         'crawls',   crawl_id,\n                                         'reports',  report_id,\n                                         'report_rows'),\n                                httr::add_headers('X-Auth-Token' = session_token))\n\n  httr::stop_for_status(session_response)\n\n  if (httr::http_type(session_response) != \"application/json\") {\n    stop(\"API did not return json\", call. = FALSE)\n  }\n\n  parsed <- jsonlite::fromJSON(httr::content(session_response, \"text\", encoding = 'utf-8'), simplifyVector = FALSE)\n\n  return(parsed)\n\n}\n\n#' Extract useful report data\n#'\n#' Get a data frame from the reports object\n#'\n#' @param session_token Session token from `create_session_token`.\n#' @param account_id The ID for the account (can be found with get_account_info)\n#' @param project_id The ID of the project, from `create_project\n#' @param crawl_id The ID of the crawl, from `create_crawl`\n#'\n#' @return A dataframe with one observation for each URL\n#' @export\n#'\n#' @examples\n#'\n#' get_all_report_data(session_token, 424, 18821, 114538)\nget_all_report_data <- function(session_token, account_id, project_id, crawl_id){\n  # Get the ID of the report we require\n  reports <- get_reports_info(session_token, account_id, project_id, crawl_id)\n\n  n_rows <- purrr::map_int(reports, 'total_rows')\n  ids <- purrr::map_int(reports, 'id')\n  ids <- ids[n_rows > 0]\n\n  get_report_df <- function(id){\n    # Get the data from this report\n    raw_data <- get_report_data(session_token, account_id, project_id, crawl_id, id)\n    data <- purrr::map(raw_data, 'data')\n\n    # Change NULLs to missing values\n    data <- purrr::map(data, ~purrr::map_if(.x, is.null, ~ NA))\n\n    # Convert to dataframe and combine\n    df <- purrr::map(data, tibble::as_data_frame)\n\n    # Find overallaping varaibales\n    cols <- purrr::map(df, names)\n    cols <- purrr::reduce(cols, intersect)\n\n    # Combine data frames\n    df <- purrr::map(df, dplyr::select_, .dots = cols)\n    df <- dplyr::bind_rows(df)\n\n    return(df)\n  }\n\n  dfs <- purrr::map(ids, purrr::possibly(get_report_df, NULL))\n  dfs <- purrr::keep(dfs, ~!is.null(.x))\n}\n\n# curl -X POST -H 'X-Auth-Token:abcdef123' 'https://prod-1-dc-api-oopeix3r.deepcrawl.com/accounts/1/projects/2/crawls' -d 'status=crawling'\n# project_id <- 18821\n# crawl_id <- 114538\n# crawl_id <- 114540\n",
    "created" : 1473329238518.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "309216750",
    "id" : "8FE16939",
    "lastKnownWriteTime" : 1473347433,
    "last_content_update" : 1473347433165,
    "path" : "~/Documents/APIs/deepcrawl/R/get.R",
    "project_path" : "R/get.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}